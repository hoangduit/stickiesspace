<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:StickyWindow"
    xmlns:cvrt="clr-namespace:LearnWPF.Converters"
    xmlns:e="clr-namespace:stickiesSpace"
    >

  <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#ddd" />
  <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />

  <LinearGradientBrush x:Key="shine" EndPoint="0.494,0.889" StartPoint="0.494,0.028">
    <GradientStop Color="#99FFFFFF" Offset="0"/>
    <GradientStop Color="{Binding Path=Background, ElementName=container}" Offset="1"/>   <!--#22ADD8E6-->
  </LinearGradientBrush>

  <TransformGroup x:Key="shineRotate">
    <ScaleTransform ScaleY="-1" />
    <RotateTransform Angle="90"/>
  </TransformGroup>

  <RadialGradientBrush x:Key="buttonGlow">
    <RadialGradientBrush.RelativeTransform>
      <TransformGroup>
        <ScaleTransform ScaleX="1.702" ScaleY="2.243"/>
        <TranslateTransform X="-0.368" Y="-0.152"/>
      </TransformGroup>
    </RadialGradientBrush.RelativeTransform>
    <GradientStop Color="#B28DBDFF" Offset="0"/>
    <GradientStop Color="#008DBDFF" Offset="1"/>
  </RadialGradientBrush>

  <LinearGradientBrush x:Key="buttonShine"  EndPoint="0.494,0.889" StartPoint="0.494,0.028">
    <GradientStop Color="#99FFFFFF" Offset="0"/>
    <GradientStop Color="#33FFFFFF" Offset="1"/>
  </LinearGradientBrush>
  
  <cvrt:ArithmeticConverter x:Key="AC"/>


  <Style TargetType="ContextMenu">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
    <Setter Property="HasDropShadow" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ContextMenu">
          <Border
            Name="Border"
            Background="{StaticResource WindowBackgroundBrush}"
            BorderBrush="{StaticResource SolidBorderBrush}"
            BorderThickness="2" >
            <StackPanel IsItemsHost="True"
                        KeyboardNavigation.DirectionalNavigation="Cycle"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" Value="true">
              <Setter TargetName="Border" Property="Padding" Value="0,3,0,3"/>
              <Setter TargetName="Border" Property="CornerRadius" Value="10"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style TargetType="{x:Type local:StickyWindowModel}">

    <Setter Property="Height" Value="200" />
    <Setter Property="Width" Value="200" />
    <Setter Property="MinHeight" Value="50" />
    <Setter Property="MinWidth" Value="100" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="MyWindowState" Value="Normal" />
    <Setter Property="ResizeMode" Value="CanResizeWithGrip" />

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:StickyWindowModel}">

          <Canvas x:Name="container"  HorizontalAlignment="Left" VerticalAlignment="Top"
                  Height="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"
                  Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}">

            
            
            <!--TextBox-->
            <local:MyScrollViewer x:Name="scroller" Canvas.Top="10" Canvas.Left="10" VerticalScrollBarVisibility="Hidden"
              Height="{Binding Path=ActualHeight, ElementName=container,
                                            Converter={StaticResource AC},
                                            ConverterParameter=Int32.Parse(-10)}"
              Width="{Binding Path=ActualWidth, ElementName=container,
                                            Converter={StaticResource AC},
                                            ConverterParameter=Int32.Parse(-10)}" >

              <local:MyTextBox x:Name="txtArea" Background="LightBlue" Padding="0,0,10,10" BorderThickness="0"
                       AcceptsTab="True" AcceptsReturn="True" TextWrapping="Wrap"  ActiveState="Active" PreviousActiveState="Active"/>

            </local:MyScrollViewer>



            <!--Border & Border Shines-->
            <Border x:Name="border" BorderThickness="10,10,0,0" BorderBrush="LightBlue" CornerRadius="5,7,0,7" Focusable="False"
                    Height="{Binding Path=ActualHeight, ElementName=container}"
                    Width="{Binding Path=ActualWidth, ElementName=container}" />

            <Border x:Name="shineTop" Canvas.Top="0" Canvas.Left="5" CornerRadius="5,7,2,5" Focusable="False"
                    Height="11"
                    Background="{StaticResource shine}"                    
                    Width="{Binding Path=ActualWidth, ElementName=container,
                                          Converter={StaticResource AC},
                                          ConverterParameter=Int32.Parse(-6)}" />

            <Border x:Name="shineLeft" Canvas.Top="5" Canvas.Left="0" CornerRadius="5,7,2,5" Focusable="False"
                    Height="11"
                    Background="{StaticResource shine}"
                    RenderTransform="{StaticResource shineRotate}"                    
                    Width="{Binding Path=ActualHeight, ElementName=container,
                                          Converter={StaticResource AC},
                                          ConverterParameter=Int32.Parse(-6)}" />



            <!--Context Circle-->
            <Border x:Name="contextCircle" Height="17" Width="17" Background="#ff000000" BorderBrush="#FF000000" BorderThickness="0" CornerRadius="11" Focusable="False">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="0.507*"/>
                  <RowDefinition Height="0.493*"/>
                </Grid.RowDefinitions>
                <Border HorizontalAlignment="Stretch" x:Name="glow" Width="Auto" Grid.RowSpan="2" CornerRadius="10"
                        Background="{StaticResource buttonGlow}" />
                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Width="Auto" Grid.RowSpan="2"/>
                <Border HorizontalAlignment="Stretch" Margin="0,0,0,0" x:Name="shine" Width="Auto" CornerRadius="10,10,2,2"
                        Background="{StaticResource buttonShine}"/>
              </Grid>
            </Border>



            <!--Scroll Slider-->
            <local:MySlider x:Name="slider" Orientation="Vertical" Width="13" Background="Transparent"
                    Canvas.Right="-35" Canvas.Top="15" IsDirectionReversed="True" Minimum="0"
                    Height="{Binding Path=ActualHeight, ElementName=scroller,
                                      Converter={StaticResource AC},
                                      ConverterParameter=Int32.Parse(-25)}" 
                    Value="{Binding Path=MyVerticalOffset, ElementName=scroller}" />

            
            <ResizeGrip x:Name="WindowResizeGrip" Canvas.Right="0" Canvas.Bottom="0" Visibility="Collapsed" IsTabStop="False"/>

          </Canvas>

          
          <ControlTemplate.Triggers>
            <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
              <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>

          
          <ControlTemplate.Resources>
            
            <Storyboard x:Key="animationsMinimize">
              <DoubleAnimation
                Storyboard.TargetProperty="(Window.Height)"
                From="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"
                To="20"
                Duration="0:0:0.25" />
              <DoubleAnimation
                Storyboard.TargetProperty="(Window.Width)"
                From="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
                To="20"
                Duration="0:0:0.25" />
            </Storyboard>

            <Storyboard x:Key="animationsRestore">
              <DoubleAnimation
                Storyboard.TargetProperty="(Window.Height)"
                From="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"
                To="{Binding Path=OriginalSize.Height, RelativeSource={RelativeSource TemplatedParent}}"
                Duration="0:0:0.25" />
              <DoubleAnimation
                Storyboard.TargetProperty="(Window.Width)"
                From="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
                To="{Binding Path=OriginalSize.Width, RelativeSource={RelativeSource TemplatedParent}}"
                Duration="0:0:0.25" />
            </Storyboard>

            <Storyboard x:Key="animationsFitContent">
              <DoubleAnimation
                Storyboard.TargetProperty="(Window.Height)"
                From="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"
                Duration="0:0:0.25" />
              <DoubleAnimation
                Storyboard.TargetProperty="(Window.Width)"
                From="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
                To="200"
                Duration="0:0:0.25" />
            </Storyboard>

            <Storyboard x:Key="animationsMoveToFitColorControlsParent">
              <DoubleAnimation
                Storyboard.TargetProperty="(Window.Left)"
                From="{Binding Path=Left, RelativeSource={RelativeSource TemplatedParent}}"
                To="450" 
                Duration="0:0:0.25" />
            </Storyboard>
            
          </ControlTemplate.Resources>

          
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>






    <Style TargetType="{x:Type local:StickyWindowColorControlModel}">
      <Setter Property="Height" Value="200" />
      <Setter Property="Width" Value="200" />
      <Setter Property="MinHeight" Value="200" />
      <Setter Property="MinWidth" Value="200" />
      <Setter Property="Background" Value="Transparent" />      
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:StickyWindowColorControlModel}">
                  <Canvas x:Name="colorContainer" HorizontalAlignment="Left" VerticalAlignment="Top"
                          Height="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"
                          Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" >

                    <Border BorderThickness="0" CornerRadius="5"
                          Height="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"
                          Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" >
                      <Border.Background>
                        <LinearGradientBrush>
                          <GradientStop Color="#FF000000" Offset="0"/>
                          <GradientStop Color="#FFDDDDDD" Offset="1"/>
                        </LinearGradientBrush>
                      </Border.Background>
                    </Border>
                    
                    <TextBlock Text="Alpha" Canvas.Top="10" Canvas.Left="10" Foreground="White" />
                    <Slider x:Name="alpha" Value="1" Minimum="0" Maximum="1" Canvas.Top="10" Canvas.Left="50" Width="100" />
                    <TextBlock Text="Red" Canvas.Top="40" Canvas.Left="10" Foreground="White" />
                    <Slider x:Name="red" Value=".5" Minimum="0" Maximum="1" Canvas.Top="40" Canvas.Left="50" Width="100" />
                    <TextBlock Text="Green" Canvas.Top="70" Canvas.Left="10" Foreground="White" />
                    <Slider x:Name="green" Value=".5" Minimum="0" Maximum="1" Canvas.Top="70" Canvas.Left="50" Width="100" />
                    <TextBlock Text="Blue" Canvas.Top="100" Canvas.Left="10" Foreground="White" />
                    <Slider x:Name="blue" Value=".5" Minimum="0" Maximum="1" Canvas.Top="100" Canvas.Left="50" Width="100" />

                    <Rectangle x:Name="testRect" Height="50" Width="50" Canvas.Top="130" Canvas.Left="75" />

                    <Button x:Name="close" Content="X" Foreground="Red" Background="Transparent" Height="20" Width="20" 
                            Canvas.Right="5" Canvas.Top="5" />
                    
                  </Canvas>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
  
  
</ResourceDictionary>
