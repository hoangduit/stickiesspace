<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:StickyWindow"
    xmlns:cvrt="clr-namespace:LearnWPF.Converters"
    >


  <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#ddd" />
  <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />

  <LinearGradientBrush x:Key="shine" EndPoint="0.494,0.889" StartPoint="0.494,0.028">
    <GradientStop Color="#99FFFFFF" Offset="0"/>
    <GradientStop Color="{Binding Path=Background, ElementName=container}" Offset="1"/>
    <!--#22ADD8E6-->
  </LinearGradientBrush>

  <TransformGroup x:Key="shineRotate">
    <ScaleTransform ScaleY="-1" />
    <RotateTransform Angle="90"/>
  </TransformGroup>

  <ScaleTransform x:Key="sliderScale" ScaleY=".75" />
  
  <RadialGradientBrush x:Key="buttonGlow">
    <RadialGradientBrush.RelativeTransform>
      <TransformGroup>
        <ScaleTransform ScaleX="1.702" ScaleY="2.243"/>
        <TranslateTransform X="-0.368" Y="-0.152"/>
      </TransformGroup>
    </RadialGradientBrush.RelativeTransform>
    <GradientStop Color="#B28DBDFF" Offset="0"/>
    <GradientStop Color="#008DBDFF" Offset="1"/>
  </RadialGradientBrush>

  <LinearGradientBrush x:Key="buttonShine"  EndPoint="0.494,0.889" StartPoint="0.494,0.028">
    <GradientStop Color="#99FFFFFF" Offset="0"/>
    <GradientStop Color="#33FFFFFF" Offset="1"/>
  </LinearGradientBrush>

  <cvrt:ArithmeticConverter x:Key="AC"/>

  <local:LuminanceToBrushConverter x:Key="LuminanceToBrush"/>
  <local:ColorItemList x:Key="ColorList"/>
  <DataTemplate x:Key="ColorItemTemplate">
    <Border Width="126" Height="16"
      Background="{Binding Path=Brush}">
      <TextBlock
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        Foreground="{Binding Path=Luminance, Converter={StaticResource LuminanceToBrush}}"
        Text="{Binding Path=Name}"/>
    </Border>
  </DataTemplate>

  <Style TargetType="ContextMenu">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
    <Setter Property="HasDropShadow" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ContextMenu">
          <Border
            Name="Border"
            Background="{StaticResource WindowBackgroundBrush}"
            BorderBrush="{StaticResource SolidBorderBrush}"
            BorderThickness="2" >
            <StackPanel IsItemsHost="True"
                        KeyboardNavigation.DirectionalNavigation="Cycle"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" Value="true">
              <Setter TargetName="Border" Property="Padding" Value="0,3,0,3"/>
              <Setter TargetName="Border" Property="CornerRadius" Value="10"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientBrush.GradientStops>
      <GradientStopCollection>
        <GradientStop Color="#FFF" Offset="0.0"/>
        <GradientStop Color="#EEE" Offset="1.0"/>
      </GradientStopCollection>
    </GradientBrush.GradientStops>
  </LinearGradientBrush>

  <LinearGradientBrush x:Key="TabBackgroundBrush" EndPoint="0.494,0.889" StartPoint="0.494,0.028">
    <GradientStop Color="#99FFFFFF" Offset="0"/>
    <GradientStop Color="{Binding Path=Background, ElementName=container}" Offset="1"/>
  </LinearGradientBrush>


  <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#222" />

  <SolidColorBrush x:Key="DisabledBorderBrush" Color="#222" />

  <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#222" />


  
  
  
  <Style TargetType="{x:Type local:StickyWindowModel}">

    <Setter Property="Height" Value="200" />
    <Setter Property="Width" Value="200" />
    <Setter Property="MinHeight" Value="50" />
    <Setter Property="MinWidth" Value="100" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="MyWindowState" Value="Normal" />
    <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
    <Setter Property="Opacity" Value="0" />
    
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:StickyWindowModel}">

          <Canvas x:Name="container"  HorizontalAlignment="Left" VerticalAlignment="Top"
                  Height="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"
                  Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}">



            <!--TextBox-->
            <local:MyScrollViewer x:Name="scroller" Canvas.Top="10" Canvas.Left="10" VerticalScrollBarVisibility="Hidden"
              Height="{Binding Path=ActualHeight, ElementName=container,
                                            Converter={StaticResource AC},
                                            ConverterParameter=Int32.Parse(-10)}"
              Width="{Binding Path=ActualWidth, ElementName=container,
                                            Converter={StaticResource AC},
                                            ConverterParameter=Int32.Parse(-10)}" >

              <local:MyTextBox x:Name="txtArea" Background="LightBlue" Padding="0,0,10,10" BorderThickness="0"
                       AcceptsTab="True" AcceptsReturn="True" TextWrapping="Wrap"  ActiveState="Active" PreviousActiveState="Active"/>

            </local:MyScrollViewer>



            <!--Border & Border Shines-->
            <Border x:Name="border" BorderThickness="10,10,0,0" BorderBrush="LightBlue" CornerRadius="5,7,0,7" Focusable="False"
                    Height="{Binding Path=ActualHeight, ElementName=container}"
                    Width="{Binding Path=ActualWidth, ElementName=container}" />

            <Border x:Name="shineTop" Canvas.Top="0" Canvas.Left="5" CornerRadius="5,7,2,5" Focusable="False"
                    Height="11"
                    Background="{StaticResource shine}"
                    Width="{Binding Path=ActualWidth, ElementName=container,
                                          Converter={StaticResource AC},
                                          ConverterParameter=Int32.Parse(-6)}" />

            <Border x:Name="shineLeft" Canvas.Top="5" Canvas.Left="0" CornerRadius="5,7,2,5" Focusable="False"
                    Height="11"
                    Background="{StaticResource shine}"
                    RenderTransform="{StaticResource shineRotate}"
                    Width="{Binding Path=ActualHeight, ElementName=container,
                                          Converter={StaticResource AC},
                                          ConverterParameter=Int32.Parse(-6)}" />



            <!--Context Circle-->
            <Border x:Name="contextCircle" Height="10" Width="10" Canvas.Top="1.5" Canvas.Left="1.5"  
                    Background="#ff000000" BorderBrush="#FF000000" BorderThickness="0" CornerRadius="11" Focusable="False">
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="0.507*"/>
                  <RowDefinition Height="0.493*"/>
                </Grid.RowDefinitions>
                <Border HorizontalAlignment="Stretch" x:Name="glow" Width="Auto" Grid.RowSpan="2" CornerRadius="10"
                        Background="{StaticResource buttonGlow}" />
                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Width="Auto" Grid.RowSpan="2"/>
                <Border HorizontalAlignment="Stretch" Margin="0,0,0,0" x:Name="shine" Width="Auto" CornerRadius="10,10,2,2"
                        Background="{StaticResource buttonShine}"/>
              </Grid>
            </Border>



            <!--Scroll Slider-->
            <local:MySlider x:Name="slider" Orientation="Vertical" Width="13" Background="Transparent"
                    Canvas.Right="-35" Canvas.Top="15" IsDirectionReversed="True" Minimum="0"
                    Height="{Binding Path=ActualHeight, ElementName=scroller,
                                      Converter={StaticResource AC},
                                      ConverterParameter=Int32.Parse(-25)}" 
                    Value="{Binding Path=MyVerticalOffset, ElementName=scroller}" />

            
            <ResizeGrip x:Name="WindowResizeGrip" Canvas.Right="0" Canvas.Bottom="0" Visibility="Collapsed" IsTabStop="False"/>

          </Canvas>

          
          <ControlTemplate.Triggers>
            <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
              <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible"/>
            </Trigger>
          </ControlTemplate.Triggers>

          
          <ControlTemplate.Resources>
            
            <Storyboard x:Key="animationsMinimize">
              <DoubleAnimation
                Storyboard.TargetProperty="(Window.Height)"
                From="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"
                To="20"
                Duration="0:0:0.25" />
              <DoubleAnimation
                Storyboard.TargetProperty="(Window.Width)"
                From="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
                To="20"
                Duration="0:0:0.25" />
            </Storyboard>

            <Storyboard x:Key="animationsFitContent">
              <DoubleAnimation
                Storyboard.TargetProperty="(Window.Height)"
                From="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}"
                Duration="0:0:0.25" />
              <DoubleAnimation
                Storyboard.TargetProperty="(Window.Width)"
                From="{Binding Path=ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
                To="200"
                Duration="0:0:0.25" />
            </Storyboard>

            <Storyboard x:Key="animationsFadeInColorControl">
              <DoubleAnimation
                Storyboard.TargetProperty="(Canvas.Opacity)"
                From="0"
                To="1" 
                Duration="0:0:0.50" />
            </Storyboard>

          </ControlTemplate.Resources>

          
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


    <Style TargetType="{x:Type local:StickyWindowColorControlModel}">
      <Setter Property="Background" Value="Transparent" />      
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:StickyWindowColorControlModel}">
                  <Canvas x:Name="colorContainer"  HorizontalAlignment="Left" VerticalAlignment="Top"
                          Height="200" Width="200" 
                          DataContext="{Binding Source={StaticResource ColorList}}" >
                    <Canvas.BitmapEffect>
                      <DropShadowBitmapEffect Softness=".8" />
                    </Canvas.BitmapEffect>

                    
                    <Border BorderThickness="1" CornerRadius="5" BorderBrush="White" Background="#aaC78C39"
                          Height="{Binding Path=ActualHeight, ElementName=colorContainer}"
                          Width="{Binding Path=ActualWidth, ElementName=colorContainer}" />


                    <TabControl Background="Transparent" BorderThickness="0" BorderBrush="Transparent" 
                                Height="220" Canvas.Top="-1" 
                                Width="220" Canvas.Left="-1" >
                      <TabItem Header="Note Color">
                        <Canvas>
                          <ComboBox x:Name="colorListN" Height="22" Width="150" Canvas.Left="14" Canvas.Top="10"
                                    ItemsSource="{Binding}"
                                    ItemTemplate = "{StaticResource ColorItemTemplate}" />

                          <TextBlock Text="Alpha" Canvas.Top="40" Canvas.Left="19" Foreground="White" />
                          <Slider x:Name="alphaN" Value="1" Minimum="0" Maximum="1" Canvas.Top="40" Canvas.Left="50" Width="100" RenderTransform="{StaticResource sliderScale}"/>
                          <TextBlock Text="Red" Canvas.Top="60" Canvas.Left="27" Foreground="White" />
                          <Slider x:Name="redN" Value=".5" Minimum="0" Maximum="1" Canvas.Top="60" Canvas.Left="50" Width="100" RenderTransform="{StaticResource sliderScale}" />
                          <TextBlock Text="Green" Canvas.Top="80" Canvas.Left="17" Foreground="White" />
                          <Slider x:Name="greenN" Value=".5" Minimum="0" Maximum="1" Canvas.Top="80" Canvas.Left="50" Width="100" RenderTransform="{StaticResource sliderScale}" />
                          <TextBlock Text="Blue" Canvas.Top="100" Canvas.Left="25" Foreground="White" />
                          <Slider x:Name="blueN" Value=".5" Minimum="0" Maximum="1" Canvas.Top="100" Canvas.Left="50" Width="100" RenderTransform="{StaticResource sliderScale}" />
                        </Canvas>
                      </TabItem>

                      <TabItem Header="Text Color">
                        <Canvas>
                          <ComboBox x:Name="colorListT" Height="22" Width="150" Canvas.Left="14" Canvas.Top="10"
                                    ItemsSource="{Binding}"
                                    ItemTemplate = "{StaticResource ColorItemTemplate}" />

                          <TextBlock Text="Alpha" Canvas.Top="40" Canvas.Left="19" Foreground="White" />
                          <Slider x:Name="alphaT" Value="1" Minimum="0" Maximum="1" Canvas.Top="40" Canvas.Left="50" Width="100" RenderTransform="{StaticResource sliderScale}"/>
                          <TextBlock Text="Red" Canvas.Top="60" Canvas.Left="27" Foreground="White" />
                          <Slider x:Name="redT" Value=".5" Minimum="0" Maximum="1" Canvas.Top="60" Canvas.Left="50" Width="100" RenderTransform="{StaticResource sliderScale}" />
                          <TextBlock Text="Green" Canvas.Top="80" Canvas.Left="17" Foreground="White" />
                          <Slider x:Name="greenT" Value=".5" Minimum="0" Maximum="1" Canvas.Top="80" Canvas.Left="50" Width="100" RenderTransform="{StaticResource sliderScale}" />
                          <TextBlock Text="Blue" Canvas.Top="100" Canvas.Left="25" Foreground="White" />
                          <Slider x:Name="blueT" Value=".5" Minimum="0" Maximum="1" Canvas.Top="100" Canvas.Left="50" Width="100" RenderTransform="{StaticResource sliderScale}" />
                        </Canvas>
                      </TabItem>
                    </TabControl>

                    <Border Background="Red" x:Name="testRect" Height="40" Width="80" Canvas.Top="150" Canvas.Left="60" CornerRadius="5" BorderThickness="0">
                      <TextBlock x:Name="testText" Text="Sample Text" VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                    
                    <Button x:Name="close" Content="X" Foreground="White" FontSize="8" Background="Transparent" Height="19" Width="19"
                            Canvas.Right="5" Canvas.Top="5" />

                    <Button x:Name="apply" Content="Apply" Foreground="White" FontSize="10" Background="Transparent" Height="25" Width="45"
                            Canvas.Right="10" Canvas.Top="165" />
                    
                  </Canvas>

                  <ControlTemplate.Resources>
                    
                    <Style TargetType="{x:Type TabItem}">
                      <Setter Property="Template">
                        <Setter.Value>
                          <ControlTemplate TargetType="{x:Type TabItem}">
                            <Grid>
                              <Border
                                Name="Border"
                                Margin="5,2,-4,0"
                                Background="{StaticResource LightBrush}"
                                BorderBrush="{StaticResource SolidBorderBrush}"
                                BorderThickness="1,1,1,1"
                                CornerRadius="2,12,0,0" >
                                <ContentPresenter x:Name="ContentSite"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Center"
                                  ContentSource="Header"
                                  Margin="12,2,12,2"
                                  RecognizesAccessKey="True" />
                              </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                              <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Panel.ZIndex" Value="100" />
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource TabBackgroundBrush}" />
                                <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                                <Setter Property="Foreground" Value="White" />
                              </Trigger>
                              <Trigger Property="IsSelected" Value="False">
                                <Setter TargetName="Border" Property="Background" Value="Transparent" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                                <Setter Property="Foreground" Value="LightGray" />
                              </Trigger>
                            </ControlTemplate.Triggers>
                          </ControlTemplate>
                        </Setter.Value>
                      </Setter>
                    </Style>                    
                  </ControlTemplate.Resources>
                  
                  
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
  
  
</ResourceDictionary>
